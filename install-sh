#!/bin/bash
#
# install-sh
#
# note: this file is not named install.sh to avoid unwanted behavior
# due to implicit rules with "make"
#
# installer for pcap2flow and related files

usage() { 
    echo "usage:"
    echo ""
    echo "   $0 [ -c configfile ] [ -a anonfile ] [-w watchfile ] [ -k keyfile ]"
    echo ""
    echo "where the options are as follows"
    echo ""
    echo "   configfile is the name of a pcap2flow configuration file; if no" 
    echo "   such file is provided, then the default configuration p2f.cfg is used"
    echo ""
    echo "   anonfile is the name of a file containing subnets to be anonymized; if no" 
    echo "   such file is provided, then the default file anon.cfg is used"
    echo ""
    echo "   watchfile is the name of a file containing subnets or addresses to labeled"
    echo "   as malware; if no such file is provided, then the Talos ip-filter.blf file"
    echo "   is downloaded and used"
    echo ""
    echo "   keyfile is the name of a file containing an SSH private key to be used"
    echo "   to upload the JSON flow data files to a server via scp; if no such file"
    echo "   is provided, then an SSH file with the default name of upload-key is created" 
    echo ""
    echo "for more information about these files and their formats, please read the" 
    echo "pcap2flow man page"
    echo ""
    exit
} 

# set defaults
#
CONFIGFILE=linux.cfg
MACOSX_CONFIGFILE=macosx.cfg
ANONFILE=internal.net
WATCHFILE=""
KEYFILE=""

# check command line arguments, ovveride defaults as appropirate
#
while getopts "c:a:w:k:" arg; do
    case $arg in
	c)
	    echo "-c was triggered with option ${OPTARG}" 
	    CONFIGFILE=${OPTARG}
	    MACOSX_CONFIGFILE=${OPTARG}
	    ;;
	a)
	    echo "-a was triggered with option ${OPTARG}" 
	    ANONFILE=${OPTARG}
	    ;;
	w)
	    echo "-w was triggered with option ${OPTARG}" 
	    WATCHFILE=${OPTARG}
	    ;;
	k)
	    echo "-k was triggered with option ${OPTARG}" 
	    KEYFILE=${OPTARG}
	    ;;
	:)
	    echo "error: option -${OPTARG} requires an argument" 
	    usage
	    ;;
	?)
	    usage
	    ;;
    esac
done
if [ $(($# + 1)) != "${OPTIND}" ]; then
    echo "error: illegal option"
    usage
fi

# this script requires root privileges; complain and bail otherwise
#
if [[ $EUID -ne 0 ]]; then
   echo "error: $0 must be run as root; perhaps run \"sudo $0\"" 
   exit 1
fi

# check for the presence of required files
#
if [ ! -x bin/pcap2flow ]; then
    echo "error: could not find executable file pcap2flow (please run \"make\")"
    exit
fi

if [ ! -f doc/pcap2flow.1 ]; then
    echo "error: could not find manual page pcap2flow.1"
    exit
fi

if [ ! -f ./pcap2flow.rc ]; then
    echo "error: could not find script pcap2flow.rc"
    exit
fi

if [ ! -f $CONFIGFILE ]; then
    echo "error: could not find configuration file $CONFIGFILE"
    exit
fi

if [ ! -f $MACOSX_CONFIGFILE ]; then
    echo "error: could not find configuration file $MACOSX_CONFIGFILE"
    exit
fi

if [ ! -f ${ANONFILE} ]; then
    echo "error: could not find private address configuration file ${ANONFILE}"
    exit
fi

if [ "${WATCHFILE}" == "" ]; then
    # use the default malware watchfile
    #
    WATCHFILE=ip-filter.blf

    # find a downloader program
    command -v curl -h >/dev/null 2>&1
    retval=$?
    if [ $retval -ne "0" ]; then
	command -v wget -h >/dev/null 2>&1
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: did not find either curl or wget, cannot download $WATCHFILE"
	    exit
	else
	    downloader=wget
	fi
    else
	echo "found curl"
	downloader=curl
    fi
    echo "using program $downloader"

    # download the current public list of malware IP addresses from
    # Talos (the Sourcefire/Cisco threat intelligence team) - note
    # that this file changes daily, so don't rely on it if you don't
    # update it - and install it as a malware watchlist file
    # 
    echo "downloading ip-filter.blf ... "
    $downloader http://www.talosintel.com/feeds/ip-filter.blf -o ./ip-filter.blf
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not download ${WATCHFILE}"
	exit
    fi
    if [ ! -f ${WATCHFILE} ]; then
	echo "error: could not find watchfile ${WATCHFILE}"
	exit
    fi
fi

if [ "${KEYFILE}" == "" ]; then
    # set default name for upload key file 
    #
    KEYFILE=upload-key  
fi
if [ -f ${KEYFILE} ]; then 
    echo "file ${KEYFILE} exists; not overwriting it"
    NEWKEY=0
else
    echo "generating SSH public/private keypair ... "
    ssh-keygen -f ${KEYFILE} -P "" -t rsa -b 2048
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not generate SSH key ${KEYFILE}"
	exit
    fi
    if [ ! -f ${KEYFILE} ]; then
	echo "error: could not find keyfile ${KEYFILE}"
	exit
    fi
    NEWKEY=1
fi

sysname=`uname -s`

if [ "$sysname" == "Darwin" ]; then

    echo "found $sysname (Mac OS X), installing pcap2flow ..."

    cp bin/pcap2flow /usr/libexec/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /usr/libexec/"
	exit
    fi

    if [ ! -d /var/p2f ]; then
	mkdir /var/p2f
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not make directory /var/p2f"
	    exit
	fi
    else
	echo "directory /var/p2f/ already exists"
    fi

    if [ ! -d /etc/p2f ]; then
	mkdir /etc/p2f
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not make directory /etc/p2f"
	    exit
	fi
    else
	echo "directory /etc/p2f/ already exists"
    fi

    if [ -f /etc/p2f/macosx.cfg ]; then
	echo "warning: file /etc/p2f/macosx.cfg exists; renaming that file to macosx.cfg.bak"
	mv /etc/p2f/macosx.cfg /etc/p2f/macosx.cfg.bak 
    else
	cp ${MACOSX_CONFIGFILE} /etc/p2f/macosx.cfg
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not copy to /etc/p2f"
	    exit
	fi
    fi

    if [ -f /etc/p2f/${ANONFILE} ]; then
	echo "file /etc/p2f/${ANONFILE} exists; not installing anonymization subnet file"
    else
	cp ${ANONFILE} /etc/p2f/
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not copy to /etc/p2f"
	    exit
	fi
    fi
    mv ${KEYFILE} /etc/p2f/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not move ${KEYFILE} to /etc/p2f"
	exit
    fi
    chmod 600 /etc/p2f/${KEYFILE}

   if [ -f /etc/p2f/${WATCHFILE} ]; then
	echo "file /etc/p2f/${WATCHFILE} exists; overwriting with recent file"
   fi
   cp ${WATCHFILE} /etc/p2f/
   retval=$?
   if [ $retval -ne "0" ]; then
       echo "error: could not copy to /etc/p2f"
       exit
   fi

    cp pcap2flow.plist /System/Library/LaunchDaemons/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /System/Library/LaunchDaemons/"
	exit
    fi

    cp doc/pcap2flow.1 /usr/share/man/man1/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /usr/share/man/man1/ (man page will be unavailable)"
	exit
    fi

    ls -l /usr/libexec/pcap2flow
    ls -l /etc/p2f/macosx.cfg
    ls -l /etc/p2f/${ANONFILE}
    ls -l /etc/p2f/${KEYFILE}
    ls -l /etc/p2f/${WATCHFILE}
    ls -l /System/Library/LaunchDaemons/pcap2flow.plist
    ls -l /usr/share/man/man1/pcap2flow.1
    echo "done"

    echo "stopping flow capture daemon (just in case one is already running)"
    launchctl unload /System/Library/LaunchDaemons/pcap2flow.plist

    echo "starting flow capture daemon"
    launchctl load /System/Library/LaunchDaemons/pcap2flow.plist

    exit

elif [ "$sysname" == "Linux" ]; then 

    echo "found $sysname, installing pcap2flow ..."

    # Default to sysv for daemon management system
    daemon_system='sysv'
    if [ -f /sbin/init ]; then
        # Check if the file is a symbolic link
        if [ -h /sbin/init ]; then
            # Check whether linked to systemd
            file /sbin/init | grep 'systemd'
            retval=$?
            if [ $retval == "0" ]; then
                daemon_system='systemd'
            fi
        fi
    fi

    # stop service, if a previous version is already running
    echo "stopping service (this might take some time)" 
    service pcap2flow stop 

    cp bin/pcap2flow /usr/bin/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /usr/bin/"
	exit
    fi

    if [ ! -d /var/p2f ]; then
	mkdir /var/p2f
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not make directory /var/p2f"
	    exit
	fi
    else
	echo "directory /var/p2f/ already exists"
    fi

    if [ ! -d /etc/p2f ]; then
	mkdir /etc/p2f
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not make directory /etc/p2f"
	    exit
	fi
    else
	echo "directory /etc/p2f/ already exists"
    fi

    if [ -f /etc/p2f/linux.cfg ]; then
	echo "warning: file /etc/p2f/linux.cfg exists; renaming that file to linux.cfg.bak"
	mv /etc/p2f/linux.cfg /etc/p2f/linux.cfg.bak 
    else
	cp ${CONFIGFILE} /etc/p2f/linux.cfg
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not copy to /etc/p2f"
	    exit
	fi
    fi

    if [ -f /etc/p2f/${ANONFILE} ]; then
	echo "file /etc/p2f/${ANONFILE} exists; not installing subnet file"
    else
	cp ${ANONFILE} /etc/p2f/
	retval=$?
	if [ $retval -ne "0" ]; then
	    echo "error: could not copy to /etc/p2f"
	    exit
	fi
    fi

    mv ${KEYFILE} /etc/p2f/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not move ${KEYFILE} to /etc/p2f"
	exit
    fi
    chmod 600 /etc/p2f/${KEYFILE}

   if [ -f /etc/p2f/${WATCHFILE} ]; then
	echo "file /etc/p2f/${WATCHFILE} exists; overwriting with recent file"
   fi
   cp ${WATCHFILE} /etc/p2f/
   retval=$?
   if [ $retval -ne "0" ]; then
       echo "error: could not copy to /etc/p2f"
       exit
   fi

    cp pcap2flow.rc /etc/init.d/pcap2flow
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /etc/init.d"
	exit
    fi
    chmod +x /etc/init.d/pcap2flow
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not chmod +x /etc/init.d/pcap2flow"
	exit
    fi

    # configure to run automatically at boot time
    #
    update-rc.d pcap2flow defaults
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: update-rc.d failed (return value: $retval)"
	exit
    fi
    # start service 
    service pcap2flow start

    cp doc/pcap2flow.1 /usr/share/man/man1/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /usr/share/man/man1/"
	exit
    fi
    mandb >/dev/null
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not run mandb (man page will be unavailable)"
	# exit
    fi

    # install query
    cp query.py /usr/bin/
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy to /usr/bin/"
	exit
    fi

    if [ ! -d "/usr/share/joy" ]; then
	mkdir /usr/share/joy
    else
	echo "directory /usr/share/joy already exists"
    fi
    if [ ! -d "/usr/share/joy/data" ]; then
	mkdir /usr/share/joy/data
    else
	echo "directory /usr/share/joy/data already exists"
    fi
    cp data/* /usr/share/joy/data
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not copy data files into directory /usr/share/joy/data"
	exit
    fi    

    ls -l /usr/bin/pcap2flow
    ls -l /usr/bin/query.py
    ls -l /usr/share/joy/data/*
    ls -l /etc/p2f/linux.cfg
    ls -l /etc/p2f/${ANONFILE}
    ls -l /etc/p2f/${KEYFILE}
    ls -l /etc/p2f/${WATCHFILE}
    ls -l /etc/init.d/pcap2flow
    ls -l /usr/share/man/man1/pcap2flow.1
    service pcap2flow status

    echo "done" 
    
else

    echo "error: unknown system ($sysname)"
    exit

fi


if [ "$NEWKEY" -eq "1" ]; then

    echo "A new SSH key was generated, and its private key was installed in"
    echo "the /etc/p2f directory.  To use this key to authenticate scp"
    echo "connections to a server that copy the JSON files, you will need to"
    echo "provide the public key ${KEYFILE}.pub to the server administrator,"
    echo "as it needs to be installed in the ./ssh/known_hosts file."

fi
